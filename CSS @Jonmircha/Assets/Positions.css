html {
  scroll-behavior: smooth;
}

a {
  color: #7b39d3;
  text-decoration: none;
}

a:hover {
  color: #7fffd4;
}

h1,
h2,
h3 {
  color: #7b39d3;
}

/*-- -- Button -- --*/
/*-- -- Button -- --*/

i {
  font-size: 60px;
  position: fixed;
  top: 90%;
  right: 2%;
  scroll-behavior: smooth;
}

/*-- -- Star of the Code -- -- */
/*-- -- Star of the Code -- -- */

/*
Posicionamiento CSS

  La propiedades FLOAT y POSITION nos permiten modificar la posición natural de cualquier elemento del documento HTML.

  El navegador coloca cada elemento teniendo en cuenta el orden en el que aparece en el documento y su tipo de visualización dependiendo si es un elemento de línea o de bloque.

  Con FLOAT y POSITION podemos modificar este comportamiento.

  Elementos Flotantes
    - float: Convierte un elemento en flotante desplazándolo hasta la zona más a la izquierda o más a la derecha de la posición en la que originalmente se encontraba.
    - clear: Limpia la flotación (left, right, both)

  Tipos de Posicionamiento:
    - static (default)
    - relative
    - absolute
    - fixed
    - sticky

  Para mover los elementos posicionados se activan las propiedades:
    - top (vertical - eje Y)
    - bottom (vertical - eje Y)
    - left (horizontal - eje X)
    - right (horizontal - eje X)
    - z-index (profundidad - eje Z)

  Las propiedades top y left van a tener preferencia por sobre bottom y right respectivamente.

  Estás 5 propiedades no funcionan con el valor de static.
*/

/*-- -- Static -- --*/
/*-- -- Static -- --*/

/* static: Es el valor por defecto, significa que el elemento respeta el flujo del documento HTML, por lo que no se puede mover ni posicionar */

.static {
  background-color: lightgreen;
  position: static;
  top: 10px;
  left: 10px;
}

/*-- -- Relative -- --*/
/*-- -- Relative -- --*/

/* relative: El elemento conserva sus dimensiones y posición original en el flujo del documento. Si se mueve toma como referencia su posición original */
.relative {
  background-color: mediumturquoise;
  position: relative;
  width: 300px;
  height: 60px;
  /* top: 70px; */
  /* left: 70px; */
  bottom: 50px;
  right: 50px;
  top: -30px; /*Va hacia arriba*/
  left: -10px; /*Va hacia la izquierda*/
  top: 300px;
  left: 50px;
  top: 30px;
  left: 200px;
}

/*-- -- Absolute -- --*/
/*-- -- Absolute -- --*/

/* absolute: El elemento pierde sus dimensiones y posición original en el flujo del documento. Si se mueve puede tomar como referencia 2 elementos:
  1) El primer ancestro con posicionamiento relativo
  2) Si no encuentra un ancestro relativo, se mueve respecto del documento HTML */

/*-- Caso 2 --*/
.absolute {
  background-color: lightsalmon;
  position: absolute;
  width: 200px;
  height: 50px;
  /* top: 0; */
  /* left: 0;  */
  /* top: 100px; */
  /* left: 100px; */
  right: 0;
  bottom: 0;
  top: 0;
}

/*-- Caso 1 --*/
.relative-parent {
  background-color: mediumslateblue;
  position: relative;
  width: 600px;
  height: 50px;
  top: 25px;
  left: 50px;
}

.absolute-child {
  background-color: lightpink;
  position: absolute;
  /* left: 0; */
  /* top: 0;  */
  /* top: -50px; */
  /* left: -30px; */
  /* bottom: 0; */
  right: 0;
  top: 0;
}

/*-- -- Fixed -- --*/
/*-- -- Fixed -- --*/

/* fixed: El elemento pierde sus dimensiones y posición original en el flujo del documento. Si se mueve toma como referencia el documento HTML y queda fijo en la posición, cuando el scroll se mueva, el elemento no lo hará, queda FIJO */

.fixed {
  background-color: #f09b5e;
  position: fixed;
  width: 300px;
  height: 100px;
  /* right: 20px; */
  /* bottom: 10px; */
  top: 30px;
  left: 400px;
}

/*-- -- Sticky -- --*/
/*-- -- Sticky -- --*/

/* sticky: es un combinación de posicionamiento relative y fixed, para este posicionamiento las propiedades de top, left, bottom y right no mueven el elemento, sirven como un punto de referencia, mientras no lleguen a ese valor el elemento se comporta como relative, cuando llega se convierte en fixed

Para que este comportamiento funcione el elemento sticky debe ser hijo directo del body o su elemento contenedor debe tener dimensiones definidas y sólo será sticky dentro de las dimensiones de su contenedor padre. */

.sticky {
  background-color: lightcoral;
  position: sticky;
  padding: 10px;
  top: 35px;
}

.sticky-parent {
  border: medium dashed black;
  margin: 50px;
  height: 300px;
}

.sticky-child {
  background: lightgreen;
  position: sticky;
  padding: 10px;
  top: 75px;
}

/*-- -- Z-Index -- --*/
/*-- -- Z-Index -- --*/

/* z-index: propiedad que permite controlar la profundidad de los elementos posicionados, su valor por defecto es auto, acepta número positivos, negativos y cero.

A mayor valor el elemento esta más al frente, a menor valor más al fondo.

Un elemento padre nunca podrá estar sobre sus elementos hijos, sin embargo los elementos hijos si pueden dándoles un valor negativo y que el elemento padre no tenga definido valor de z-index */

.z-index-1,
.z-index-2,
.z-index-3,
.z-index-4 {
  background-color: lightsalmon;
  border: medium solid #ca5b2f;
  position: relative;
  width: 150px;
  height: 150px;
  display: inline-block;
}

.z-index-1 {
  z-index: 1;
  z-index: 0;
}

.z-index-2 {
  top: 50px;
  left: -60px;
  z-index: 2;
  z-index: -1;
}

.z-index-3 {
  z-index: 0;
}

.z-index-4 {
  top: 50px;
  left: -60px;
  z-index: 1;
}

/* Puedes colocar los valores con los saltos que prefieras(de 10 en 10, 5 en 5, etc...), evitar valores muy altos */

.z-index-parent {
  background-color: lightseagreen;
  width: 300px;
  height: 300px;
  position: relative;
  top: 100px;
  /* No debe tener ningun valor */
  /* z-index: 2; */
}

.z-index-child {
  background-color: #7b39d3;
  position: relative;
  width: 150px;
  height: 150px;
  top: 75px;
  left: 200px;
  z-index: -3;
  /* Pasa el hijo atras del padre */
}
